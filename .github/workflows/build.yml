name: SonarCloud # Nombre del flujo de trabajo

on:
  push:
    branches:
      - master # Se ejecuta en cada push a la rama master
  pull_request:
    types: [opened, synchronize, reopened] # Se ejecuta en la apertura, sincronización o reapertura de PRs

jobs:
  build:
    name: Build and analyze # Nombre del job
    runs-on: windows-latest # Ejecutar en un entorno Windows
    
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu' # Puedes usar 'microsoft' u otras distribuciones
          
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Deshabilitar clones superficiales para un mejor análisis de relevancia
          
      # Las siguientes acciones son para configurar el entorno de SonarQube para .NET
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
          
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
          
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory -Force
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
          
      - name: Build and analyze # Paso para la compilación y análisis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Necesario para obtener información del PR
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} # Tu token de SonarCloud
        shell: powershell
        run: |
          # Inicia el análisis de SonarScanner
          .\.sonar\scanner\dotnet-sonarscanner begin `
            /k:"JulianSuarez5_Sistema_Ventas_CRUD" `
            /o:"juliansuarez5" `
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" `
            /d:sonar.host.url="https://sonarcloud.io" `
            /d:sonar.cs.msbuild.warningsAsIssues="false" # Opcional: Para evitar que las advertencias de MSBuild detengan el análisis de SonarCloud
            
          # Compila tu solución .NET (aquí es donde Appveyor fallaba por la firma)
          # Asegúrate de que esta compilación sea exitosa antes de que SonarScanner pueda analizarla correctamente.
          dotnet build "Sistema_Ventas_CRUD.sln" 
          
          # Finaliza el análisis de SonarScanner
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
